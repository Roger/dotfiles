_force_rehash()
{
    (( CURRENT == 1 )) && rehash
    return 1
}

zstyle ':completion:*' completer _force_rehash _complete _correct _list #_expand
zstyle ':completion:*' list-colors ''

#zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
#zstyle ':completion:*' match-original both
zstyle ':completion:*' menu yes select
#zstyle ':completion:*' force-list always
zstyle ':completion:*' max-errors 2 numeric
zstyle ':completion:*' prompt '[%e]'
#zstyle ':completion:*' verbose true

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# Don't complete backup files as executables
zstyle ':completion:*:complete:-command-::commands' ignored-patterns '*\~'

# command for process lists, the local web server details and host completion
# on processes completion complete all user processes
zstyle ':completion:*:aprocesses' command 'ps --forest aux | sed "/ps/d"'
zstyle ':completion:*:uprocesses' command 'ps --forest ux | sed "/ps/d"'

# tab completion for PID :D
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always

autoload colors; colors # color macros

## add colors to processes for kill completion
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:*:killall:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'


## formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format $'%{\e[1;2;31m%}%d%{:\e[0m%}'
zstyle ':completion:*:messages' format $'%{\e[1;31m%}%d%{\e[0m%}'
zstyle ':completion:*:warnings' format $'%{\e[1;31m%}No matches for: %d%{\e[0m%}'
zstyle ':completion:*:corrections' format $'%{\e[1;31m%}%d (errors: %e)%{\e[0m%}'
zstyle ':completion:*' group-name ''

zstyle ':completion:*' file-sort name

eval `dircolors -b`
autoload -Uz compinit
compinit

# End of lines added by compinstall
# Lines configured by zsh-newuser-install
HISTFILE=~/.zsh/.hist
HISTSIZE=10000
SAVEHIST=10000

setopt appendhistory extendedglob nomatch notify
setopt HIST_REDUCE_BLANKS
setopt HIST_IGNORE_SPACE
setopt SH_WORD_SPLIT
setopt interactivecomments
setopt noclobber # non-destructive redirection
setopt noautoremoveslash # leave slashes in place

setopt print_exit_value # report job status changes
setopt checkjobs # report job status on shell exit
setopt autopushd # popd takes you pop in the dir stack



zmodload zsh/terminfo zsh/termcap

export EDITOR=vim
export SVN_EDITOR=vim

bindkey -e
#bindkey ' ' magic-space

autoload promptinit; promptinit
if [ $(whoami) = root ]; then
    prompt roger white black red
else
    prompt roger white black green
fi

# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

# setup key accordingly
[[ -n "${key[Home]}"    ]]  && bindkey  "${key[Home]}"    beginning-of-line
[[ -n "${key[End]}"     ]]  && bindkey  "${key[End]}"     end-of-line
[[ -n "${key[Insert]}"  ]]  && bindkey  "${key[Insert]}"  overwrite-mode
[[ -n "${key[Delete]}"  ]]  && bindkey  "${key[Delete]}"  delete-char
[[ -n "${key[Up]}"      ]]  && bindkey  "${key[Up]}"      up-line-or-history
[[ -n "${key[Down]}"    ]]  && bindkey  "${key[Down]}"    down-line-or-history
[[ -n "${key[Left]}"    ]]  && bindkey  "${key[Left]}"    backward-char
[[ -n "${key[Right]}"   ]]  && bindkey  "${key[Right]}"   forward-char

# backward word search
tcsh-backward-word() {
  local WORDCHARS="${WORDCHARS:s@/@}"
  zle backward-word
}
zle -N tcsh-backward-word

bindkey '5C' emacs-forward-word 
bindkey '5D' emacs-backward-word

# by default: export WORDCHARS='*?_-.[]~=/&;!#$%^(){}<>'
# we take out the slash, period, angle brackets, dash here.
export WORDCHARS='*?_[]~=&;!#$%^(){}'

## Spelling prompt
SPROMPT='zsh: correct '%R' to '%r' ? ([Y]es/[N]o/[E]dit/[A]bort) '

# security measures
alias cp="cp -i"
alias mv="mv -i"

#if [ "$SSH_CONNECTION" ]; then
#  RPROMPT="[ssh %t]"
#else
#  RPROMPT="[local %t]"
#fi
# import new commands from the history file also in other zsh-session
setopt SHARE_HISTORY

# save each command's beginning timestamp and the duration to the history file
setopt extended_history

# If a new command line being added to the history
setopt histignorealldups

# remove command lines from the history list when
# the first character on the line is a space
setopt histignorespace

# Whenever a command completion is attempted, make sure \
# the entire command path is hashed first.
setopt hash_list_all
